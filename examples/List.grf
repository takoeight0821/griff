data List a = Nil | Cons a (List a);
 
map f xs = xs |> { Nil -> Nil
                 | Cons x xs -> Cons (f x) (map f xs)
                 };
-- Desugared to:
-- FUN map f xs =
--   (\xs -> case xs of
--             Nil -> Nil
--             Cons x xs -> Cons (f x) (map f xs)
--   ) xs
map' f = { Nil -> Nil
         | Cons x xs -> Cons (f x) (map f xs)
         };

sum = { Nil -> Int# 0#
      | Cons (Int# x) xs ->
          sum xs |> {Int# s -> Int# (x +# s)}
      };