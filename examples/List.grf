data Int# = TODOAddPrimitiveType;

data Int = Int# Int#;

forign import add_int :: (Int#, Int#) -> Int#;

infixl 6 (+#);
(+#) = {x y -> add_int (x, y)};

infixl 0 (|>);
(|>) = {x f -> f x};

data List a = Nil | Cons a (List a);
 
map f xs = xs |> { Nil -> Nil
                 | Cons x xs -> Cons (f x) (map f xs)
                 };
map' f = { Nil -> Nil
         | Cons x xs -> Cons (f x) (map f xs)
         };

sum = { Nil -> Int# 0#
      | Cons (Int# x) xs ->
          sum xs |> {Int# s -> Int# (x +# s)}
      };
