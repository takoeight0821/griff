fib n =
  if n == 0 then 1
  else fib (n - 1) + fib (n - 2);

twice f x = f (f x);

type List a = <nil : {} | cons : { car : a, cdr : List a} >;

head : List a -> a;
head lst =
  case lst of
--    | <nil = _> as List a => error "nil"
    | <cons = { car = x, cdr = _ }> as List a => x;

sum : List Int -> Int;
sum lst =
  case lst of
    | <nil = _> as List Int => 0
    | <cons = { car = x, cdr = xs }> as List Int => x + sum xs;

sumAcc lst =
  let go lst acc =
    case lst of
      | <nil = _> as List Int => acc
      | <cons = { car = x, cdr = xs }> as List Int => go xs (x + acc)
  in go lst 0;

evenOdd x =
  let even x =
    if x == 0 then true
    else odd (x - 1)
  and odd x =
    if x == 0 then false
    else even (x - 1)
  in { e = even x, o = odd x};

type Option a = <none : {} | some : a>;

noneC : Option a;
noneC = <none = {}> as Option a;

someC : a -> Option a;
someC a = <some = a> as Option a;

safeHead : List a -> Option a;
safeHead lst =
  case lst of
    | <nil = _> as List a => <none = {}> as Option a
    | <cons = { car = x, cdr = _ }> as List a => <some = x> as Option a;
