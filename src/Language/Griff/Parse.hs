-- |
-- = Griffの文法
-- == 変数
-- \[a-zA-Z_][a-zA-Z0-9_]*
--
-- == 整数
-- (\+\-)[0-9]+
--
-- == 真偽値
-- True False
--
-- == 文字
-- \'a\', \'あ\'
--
-- == 文字列
-- "hello, world"
--
-- == コンストラクタ
-- Some 1, None (大文字スタート)
--
-- == 関数適用
-- (f x y z) (= (((f x) y) z))
-- (Some 1)
--
-- == 無名関数
-- (fn (x y) (+ x y)) = (fn (x) (fn (y) (+ x y)))
--
-- == 変数束縛
-- (let x 1 (= x 1))
-- (let (Some x) o (+ x 1))
--
-- == 再帰変数束縛
-- (letrec f (fn (x) (if (= x 0)
--                     Nil
--                     (Cons x (f (- x 1)))))
--  (f 10))
--
-- == case
-- (case obj
--   (Cons x xs) x
--   Nil (error "not found"))
--
-- == if
-- (if True x y)
--
-- == uncatchable runtime error
-- (error msg)
--
-- == annotation
-- (: f t)
--
-- == definition
-- (def f e)
--
-- == type definition
-- (type (List a)
--   Nil
--   (Cons a (List a)))

module Language.Griff.Parse where
